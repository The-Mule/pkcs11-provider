---
name: Integration tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
    P_LIBSSH_DEBUG: /tmp/libssh-provider-debug.log
    P_HTTPD_DEBUG: /tmp/httpd-provider-debug.log
    PIN: 123456

jobs:
  libssh:
    name: libssh
    runs-on: ubuntu-22.04
    container: docker.io/dokken/fedora-40
    steps:
      - name: Install Dependencies
        run: |
          dnf -y install gcc g++ git cmake libcmocka libcmocka-devel \
          autoconf automake autoconf-archive libtool softhsm nss-tools \
          gnutls-utils p11-kit p11-kit-devel p11-kit-server opensc \
          softhsm-devel socket_wrapper nss_wrapper uid_wrapper \
          pam_wrapper priv_wrapper openssh-server zlib-devel
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup, Build and Install pkcs11-provider
        run: |
          autoreconf -fiv
          ./configure --libdir=/usr/lib64
          make
          make install
      - name: Clone, Setup and Build libssh
        run: |
          git clone https://gitlab.com/libssh/libssh-mirror.git
          cd libssh-mirror/
          mkdir build
          cd build/
          cmake \
            -DUNIT_TESTING=ON \
            -DCLIENT_TESTING=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -DWITH_PKCS11_URI=ON \
            -DWITH_PKCS11_PROVIDER=ON \
            -DPKCS11_PROVIDER=/usr/lib64/ossl-modules/pkcs11.so ..
          make
      - name: Run libssh pkcs11-provider tests
        run: |
          cd libssh-mirror/build
          ! test -e $P_LIBSSH_DEBUG && \
            echo "Provider log $P_LIBSSH_DEBUG does not exist yet (expected)"
          PKCS11_PROVIDER_DEBUG=file:$P_LIBSSH_DEBUG ctest \
            --output-on-failure -R \
            '(torture_auth_pkcs11|torture_pki_rsa_uri|torture_pki_ecdsa_uri)' \
            | tee testout.log 2>&1
          grep -q "100% tests passed, 0 tests failed out of 3" testout.log
          test -e $P_LIBSSH_DEBUG && \
            echo "Provider log $P_LIBSSH_DEBUG exists (expected)"

  httpd:
    name: httpd
    runs-on: ubuntu-22.04
    container: docker.io/dokken/fedora-40
    steps:
      - name: Install Dependencies
        run: |
          dnf -y install p11-kit httpd mod_ssl openssl softhsm \
          gnutls-utils gcc g++ git cmake libcmocka libcmocka-devel \
          autoconf automake autoconf-archive libtool softhsm nss-tools \
          gnutls-utils p11-kit p11-kit-devel p11-kit-server opensc \
          softhsm-devel socket_wrapper nss_wrapper uid_wrapper \
          pam_wrapper priv_wrapper openssh-server zlib-devel
          dnf update -y --releasever=40 httpd
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup, Build and Install pkcs11-provider
        run: |
          autoreconf -fiv
          ./configure --libdir=/usr/lib64
          make
          make install
      - name: Softhsm token setup
        run: |
          # Generate CA and server keys.
          mkdir ca server
          openssl req -x509 -sha256 -newkey rsa:2048 -keyout ca/key.pem \
            -out ca/cert.pem -noenc -batch
          openssl req -newkey rsa:2048 -keyout server/key.pem \
            -out server/csr.pem -noenc --batch -subj '/CN=localhost'
          openssl x509 -req -CA ca/cert.pem -CAkey ca/key.pem \
            -in server/csr.pem -out server/cert.pem -CAcreateserial
          chown -R apache:apache ca server

          # Setup the token.
          usermod -a -G ods apache
          runuser -u apache -- softhsm2-util --init-token --free \
            --label softtoken --pin $PIN --so-pin $PIN
          TOKENURL=$(runuser -u apache -- p11tool --list-tokens \
              | grep "URL:.*token=softtoken" \
              | awk '{ print $NF }')
          runuser -u apache -- p11tool --write --load-privkey server/key.pem \
            --label httpd --id=%01 --login --set-pin $PIN $TOKENURL
          runuser -u apache -- p11tool --write \
            --load-certificate server/cert.pem --label httpd --id=%01 \
            --login --set-pin $PIN $TOKENURL

          # Output of tokens and their certificates and keys (for debugging).
          p11tool --list-tokens 
          p11tool --login --set-pin $PIN --list-keys $TOKENURL 
          p11tool --list-all-certs $TOKENURL
      - name: Configure openssl
        run: |
          # Add and activate pkcs11 provider section in openssl configuration.
          sed \
            -e 's|\(default = default_sect\)|\1\npkcs11 = pkcs11_sect\n|' \
            -e 's|\(\[default_sect\]\)|\[pkcs11_sect\]\n\1|' \
            -e 's|\(\[default_sect\]\)|module = /usr/lib64/ossl-modules/pkcs11.so\n\1|' \
            -e 's|\(\[default_sect\]\)|pkcs11-module-path = /usr/lib64/pkcs11/libsofthsm2.so\n\1|' \
            -e 's|\(\[default_sect\]\)|pkcs11-module-load-behavior = early\n\1|' \
            -e 's|\(\[default_sect\]\)|activate = 1\n\n\1|' \
            /etc/pki/tls/openssl.cnf >/tmp/openssl.cnf

          # Print openssl.cnf (for debugging).
          cat /tmp/openssl.cnf
    
      - name: Configure httpd
        run: |
          # Setup httpd mod_ssl to use token keys.
          TOKENURL=$(runuser -u apache -- p11tool --list-tokens \
            | grep "URL:.*token=softtoken" \
            | awk '{ print $NF }')
          KEYURL="$(runuser -u apache -- p11tool --login --set-pin $PIN \
            --list-keys $TOKENURL \
            | grep 'URL:.*object=httpd;type=private' \
            | awk '{ print $NF }')?pin-value=$PIN"
          CERTURL=$(runuser -u apache -- p11tool --list-all-certs $TOKENURL \
            | grep "URL:.*object=httpd;type=cert" \
            | awk '{ print $NF }')
          sed -i "s/^ServerName.*\$/ServerName 127.0.0.01/" /etc/httpd/conf/httpd.conf
          sed -i \
            -e "/SSLCryptoDevice/d" \
            -e "s/^SSLCertificateFile.*\$/SSLCertificateFile \"$CERTURL\"/" \
            -e "s/^SSLCertificateKeyFile.*\$/SSLCertificateKeyFile \"$KEYURL\"/" \
            /etc/httpd/conf.d/ssl.conf

          # List URLs and mod_ssl configuration (for debugging).
          echo "TOKENURL=$TOKENURL"
          echo "KEYURL=$KEYURL"
          echo "CERTURL=$CERTURL"
          cat /etc/httpd/conf.d/ssl.conf

      - name: Test httpd
        run: |
          set -x
          # Enable pkcs11-provider logging.
          export PKCS11_PROVIDER_DEBUG=file:$P_HTTPD_DEBUG

          # Start the server.
          OPENSSL_CONF=/tmp/openssl.cnf httpd -DFOREGROUNG &
          rpm -q httpd
          sleep 3 
          if pgrep httpd >/dev/null; then
            cat /var/log/httpd/error_log
            cat /var/log/httpd/ssl_error_log
            cat $P_HTTPD_DEBUG
          else 
            # Query the server.
            curl -v -sS --cacert ca/cert.pem https://localhost >/dev/null
            if [ $? -ne 0 ]; then
              cat /var/log/httpd/error_log
              cat /var/log/httpd/ssl_error_log
              cat $P_HTTPD_DEBUG
            else
              cat $P_HTTPD_DEBUG
              echo "Test passed"
            fi
          fi
